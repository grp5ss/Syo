local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local ContentProvider = game:GetService("ContentProvider")

local player = Players.LocalPlayer

local PET_ASSET_IDS = {
    ["PetAssets"] = "rbxassetid://77378765890696",     
}

local SEED_MODELS_IDS = {
    ["Seed_Models"] = "rbxassetid://124902345170220",     
}

local function createAssetsFolder(folderName)
    local assetsFolder = ReplicatedStorage:FindFirstChild("Assets")
    if not assetsFolder then
        assetsFolder = Instance.new("Folder")
        assetsFolder.Name = "Assets"
        assetsFolder.Parent = ReplicatedStorage
    end
    
    local targetFolder = assetsFolder:FindFirstChild(folderName)
    if not targetFolder then
        targetFolder = Instance.new("Folder")
        targetFolder.Name = folderName
        targetFolder.Parent = assetsFolder
    end
    
    return targetFolder
end

local function createPetAssetsFolder()
    return createAssetsFolder("Models")
end

local function createSeedModelsFolder()
    return ReplicatedStorage
end

local function loadModelWithGetObjects(assetUrl, modelName, parentFolder)
    local success, result = pcall(function()
        return game:GetObjects(assetUrl)
    end)
    
    if success and result and #result > 0 then
        local model = result[1]
        model.Name = modelName
        model.Parent = parentFolder
        
        if model:IsA("Model") then
            for _, part in pairs(model:GetDescendants()) do
                if part:IsA("BasePart") then
                    part.Anchored = true
                end
            end
        end
        
        return model
    else
        return nil
    end
end

local function loadPetWithGetObjects(assetUrl, petName, parentFolder)
    return loadModelWithGetObjects(assetUrl, petName, parentFolder)
end

local function loadSeedWithGetObjects(assetUrl, seedName, parentFolder)
    return loadModelWithGetObjects(assetUrl, seedName, parentFolder)
end

local function preloadAsset(assetUrl)
    local success, result = pcall(function()
        ContentProvider:PreloadAsync({assetUrl})
    end)
end

local function loadAllPetAssets()
    local modelsFolder = createPetAssetsFolder()
    local successCount = 0
    local totalAttempts = 0
    
    for _, child in pairs(modelsFolder:GetChildren()) do
        child:Destroy()
    end
    
    for petName, assetUrl in pairs(PET_ASSET_IDS) do
        totalAttempts = totalAttempts + 1
        
        preloadAsset(assetUrl)
        wait(0.1)
        
        local model = loadPetWithGetObjects(assetUrl, petName, modelsFolder)
        if model then
            successCount = successCount + 1
        end
        
        wait(0.1)
    end
    
    return successCount
end

local function loadAllSeedModels()
    local seedModelsFolder = createSeedModelsFolder()
    local successCount = 0
    local totalAttempts = 0
    
    -- Remove existing seed models
    local existingSeed = ReplicatedStorage:FindFirstChild("Seed_Models")
    if existingSeed then
        existingSeed:Destroy()
    end
    
    for seedName, assetUrl in pairs(SEED_MODELS_IDS) do
        totalAttempts = totalAttempts + 1
        
        preloadAsset(assetUrl)
        wait(0.1)
        
        local model = loadSeedWithGetObjects(assetUrl, seedName, seedModelsFolder)
        if model then
            successCount = successCount + 1
        end
        
        wait(0.1)
    end
    
    return successCount
end

local function spawnPetFromFolder(petName, position)
    local modelsFolder = ReplicatedStorage:FindFirstChild("Assets")
    if modelsFolder then
        modelsFolder = modelsFolder:FindFirstChild("Models")
    end
    
    if not modelsFolder then
        return nil
    end
    
    local petTemplate = modelsFolder:FindFirstChild(petName)
    if not petTemplate then
        return nil
    end
    
    local newPet = petTemplate:Clone()
    newPet.Parent = workspace
    newPet.Name = petName .. "_" .. player.Name
    
    if newPet.PrimaryPart then
        newPet:SetPrimaryPartCFrame(CFrame.new(position))
    else
        local firstPart = newPet:FindFirstChildOfClass("BasePart")
        if firstPart then
            firstPart.CFrame = CFrame.new(position)
        end
    end
    
    for _, part in pairs(newPet:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = false
        end
    end
    
    return newPet
end

local function spawnSeedFromFolder(seedName, position)
    local seedTemplate = ReplicatedStorage:FindFirstChild(seedName)
    if not seedTemplate then
        return nil
    end
    
    local newSeed = seedTemplate:Clone()
    newSeed.Parent = workspace
    newSeed.Name = seedName .. "_" .. player.Name
    
    if newSeed.PrimaryPart then
        newSeed:SetPrimaryPartCFrame(CFrame.new(position))
    else
        local firstPart = newSeed:FindFirstChildOfClass("BasePart")
        if firstPart then
            firstPart.CFrame = CFrame.new(position)
        end
    end
    
    for _, part in pairs(newSeed:GetDescendants()) do
        if part:IsA("BasePart") then
            part.Anchored = false
        end
    end
    
    return newSeed
end

local function listAvailablePets()
    local modelsFolder = ReplicatedStorage:FindFirstChild("Assets")
    if modelsFolder then
        modelsFolder = modelsFolder:FindFirstChild("Models")
    end
    
    if modelsFolder then
        for _, pet in pairs(modelsFolder:GetChildren()) do
            
        end
    end
end

local function listAvailableSeeds()
    for _, seed in pairs(ReplicatedStorage:GetChildren()) do
        if seed.Name == "Seed_Models" then
            
        end
    end
end

spawn(function()
    wait(0.1)
    
    -- Load pet assets
    local petSuccessCount = loadAllPetAssets()
    
    -- Load seed models
    local seedSuccessCount = loadAllSeedModels()
    
    wait(0.1)
    listAvailablePets()
    listAvailableSeeds()
    
    if petSuccessCount > 0 then
        local testPosition = Vector3.new(0, 10, 0)
        if player.Character and player.Character.PrimaryPart then
            testPosition = player.Character.PrimaryPart.Position + Vector3.new(5, 0, 5)
        end
        
        local modelsFolder = ReplicatedStorage:FindFirstChild("Assets")
        if modelsFolder then
            modelsFolder = modelsFolder:FindFirstChild("Models")
        end
        
        if modelsFolder and #modelsFolder:GetChildren() > 0 then
            local firstPet = modelsFolder:GetChildren()[1]
            spawnPetFromFolder(firstPet.Name, testPosition)
        end
    end
    
    if seedSuccessCount > 0 then
        local testPosition = Vector3.new(0, 10, 0)
        if player.Character and player.Character.PrimaryPart then
            testPosition = player.Character.PrimaryPart.Position + Vector3.new(-5, 0, 5)
        end
        
        local seedModelsFolder = ReplicatedStorage
        
        if seedModelsFolder and seedModelsFolder:FindFirstChild("Seed_Models") then
            local firstSeed = seedModelsFolder:FindFirstChild("Seed_Models")
            spawnSeedFromFolder(firstSeed.Name, testPosition)
        end
    end
end)

-- Global functions for pets
_G.SpawnPetFromAssets = spawnPetFromFolder
_G.ListPetsInAssets = listAvailablePets
_G.ReloadPetAssets = function()
    local assetsFolder = ReplicatedStorage:FindFirstChild("Assets")
    if assetsFolder then
        local modelsFolder = assetsFolder:FindFirstChild("Models")
        if modelsFolder then
            for _, child in pairs(modelsFolder:GetChildren()) do
                child:Destroy()
            end
        end
    end
    wait(0.1)
    loadAllPetAssets()
end

-- Global functions for seed models
_G.SpawnSeedFromAssets = spawnSeedFromFolder
_G.ListSeedsInAssets = listAvailableSeeds
_G.ReloadSeedModels = function()
    local seedModel = ReplicatedStorage:FindFirstChild("Seed_Models")
    if seedModel then
        seedModel:Destroy()
    end
    wait(0.1)
    loadAllSeedModels()
end

-- Global function to reload all assets
_G.ReloadAllAssets = function()
    _G.ReloadPetAssets()
    _G.ReloadSeedModels()
end