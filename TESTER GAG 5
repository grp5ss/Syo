-- Load the ModernGUILibrary module
local success, result = pcall(function()
    return loadstring(game:HttpGet("https://raw.githubusercontent.com/grp5ss/Syo/refs/heads/main/LIBRARY5"))()
end)
if not success or type(result) ~= "table" then
    warn("Failed to load ModernGUILibrary: ", result)
    return
end
local ModernGUILibrary = result

local CoreGui = game:GetService("CoreGui")
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local RunService = game:GetService("RunService")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local player = Players.LocalPlayer
local workspace = game:GetService("Workspace")
local TweenService = game:GetService("TweenService")


local function isDeltaExecutor()
    local executor = identifyexecutor and identifyexecutor() or "Unknown"
    return string.find(executor:lower(), "delta") ~= nil
end

if isDeltaExecutor() then
    print("Running on Delta Executor. Adjusting script for compatibility...")
end

-- Initialize the main GUI
if not ModernGUILibrary.MakeTab or type(ModernGUILibrary.MakeTab) ~= "function" then
    warn("MakeTab is not a function")
    return
end
local window = ModernGUILibrary.MakeTab({
    Name = "HOME",
    Icon = "home"
})

local spawnerTab = ModernGUILibrary.MakeTab({
    Name = "SPAWNER",
    Icon = "send"
})

local visualTab = ModernGUILibrary.MakeTab({
    Name = "STEAL",
    Icon = "send"
})

local destroyerTab = ModernGUILibrary.MakeTab({
    Name = "DESTROY",
    Icon = "send"
})

local mainTab = ModernGUILibrary.MakeTab({
    Name = "MAIN",
    Icon = "send"
})

local settingTab = ModernGUILibrary.MakeTab({
    Name = "SETTINGS",
    Icon = "settings"
})

local updateTab = ModernGUILibrary.MakeTab({
    Name = "UPDATE",
    Icon = "help-circle"
})

-- HOME Tab
if not window.AddLabel or type(window.AddLabel) ~= "function" then
    warn("AddLabel is not a function in window")
    return
end
local homeHeader, homeHeaderMethods = window.AddLabel(
    "HomeHeader",
    "HOME MENU",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 16,
        backgroundColor = Color3.fromRGB(11, 218, 81),
        textAlignment = Enum.TextXAlignment.Center,
        backgroundTransparency = 0.1,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

local versionNumber = "N/A"
local serverVersionLabel, serverVersionMethods = window.AddLabel(
    "ServerVersion",
    "Server Version: " .. (versionNumber or "Unknown"),
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 14,
        backgroundTransparency = 0,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

local hubVersionLabel, hubVersionMethods = window.AddLabel(
    "HubVersion",
    "Zysume Hub Version: 8.0",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 14,
        backgroundTransparency = 0,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

local function formatTime(seconds)
    local hours = math.floor(seconds / 3600)
    local minutes = math.floor((seconds % 3600) / 60)
    local secs = seconds % 60
    return string.format("%02d:%02d:%02d", hours, minutes, secs)
end

local startTime = os.time()
local timeLapseLabel, timeLapseMethods = window.AddLabel(
    "TimeLapse",
    "Timelapse: 00:00:00",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 14,
        backgroundTransparency = 0,
        textColor = Color3.fromRGB(100, 255, 100)
    }
)
if not timeLapseMethods or not timeLapseMethods.setText then
    warn("timeLapseMethods or setText is missing")
end

local function updateTimeLapse()
    local currentTime = os.time()
    local elapsedTime = currentTime - startTime
    local formattedTime = formatTime(elapsedTime)
    if timeLapseMethods and timeLapseMethods.setText and type(timeLapseMethods.setText) == "function" then
        timeLapseMethods.setText("Timelapse: " .. formattedTime)
    else
        warn("setText method is missing or not a function")
    end
end

spawn(function()
    while true do
        wait(1)
        updateTimeLapse()
    end
end)

local autoTeleport1, getAutoTeleportStatus1 = window.AddCheckbox(
    "info2",
    "NO LAG HUB [ OFFICIAL ]",
    nil,
    function(checked)
        if checked then
            ModernGUILibrary.createNotification("NO-LAG HUB!", "success")
            loadstring(game:HttpGet("https://rawscripts.net/raw/Grow-a-Garden-NoLag-Hub-no-key-38699"))()
        else
            ModernGUILibrary.createNotification("NO-LAG HUB", "info")
        end
    end
)

local autoTeleport992, getAutoTeleportStatus992 = window.AddCheckbox(
    "info992",
    "SPEED HUB [ OFFICIAL ]",
    nil,
    function(checked)
        if checked then
            ModernGUILibrary.createNotification("SPEED HUB!", "success")
            loadstring(game:HttpGet("https://raw.githubusercontent.com/AhmadV99/Speed-Hub-X/main/Speed%20Hub%20X.lua", true))()
        else
            ModernGUILibrary.createNotification("SPEED HUB", "info")
        end
    end
)

local autoTeleport993, getAutoTeleportStatus993 = window.AddCheckbox(
    "info993",
    "RAINBOW MAKER [ by 'u Thought' ]",
    nil,
    function(checked)
        if checked then
            ModernGUILibrary.createNotification("RAINBOW MAKER!", "success")
            loadstring(game:HttpGet("https://raw.githubusercontent.com/grp5ss/Syo/refs/heads/main/RAINBOW%20MAKWR", true))()
        else
            ModernGUILibrary.createNotification("RAINBOW MAKER", "info")
            game:GetService("Players").LocalPlayer.PlayerGui.RainbowMakerGui:Destroy()
        end
    end
)

local PlayerGui2 = LocalPlayer:WaitForChild("PlayerGui")

-- Currency system variables
local CURRENCY_FILE = "ZysumeCurrency.txt"
local currentCurrency = 0
local gameActive = false
local gameObjects = {}
local originalPosition = nil
local gameArea = nil
local currencyLabel = nil

-- Load currency from file
local function loadCurrency()
    if readfile and isfile and isfile(CURRENCY_FILE) then
        local success, data = pcall(function()
            return readfile(CURRENCY_FILE)
        end)
        if success and data then
            local amount = tonumber(data)
            if amount then
                currentCurrency = amount
                return amount
            end
        end
    end
    currentCurrency = 0
    return 0
end

-- Save currency to file
local function saveCurrency()
    if writefile then
        pcall(function()
            writefile(CURRENCY_FILE, tostring(currentCurrency))
        end)
    end
end

-- Update currency label with realtime support
local function updateCurrencyLabel()
    local currencyText = "ZYSUME CURRENCY: " .. string.format("%.1f", currentCurrency)
    
    -- Method 1: Direct update to the TextLabel object (most reliable)
    if currencyLabel and currencyLabel.Text then
        currencyLabel.Text = currencyText
    end
    
    -- Method 2: Fallback search method for safety using PlayerGui2
    pcall(function()
        if PlayerGui2 and PlayerGui2:FindFirstChild("ModernGUI") then
            local gui = PlayerGui2.ModernGUI
            local function findAndUpdateLabel(parent)
                for _, child in pairs(parent:GetChildren()) do
                    if child:IsA("TextLabel") and (string.find(child.Text, "ZYSUME CURRENCY") or child.Name:find("SpawnerHeaderLabel")) then
                        child.Text = currencyText
                        return true
                    elseif child:IsA("GuiObject") and #child:GetChildren() > 0 then
                        if findAndUpdateLabel(child) then
                            return true
                        end
                    end
                end
                return false
            end
            findAndUpdateLabel(gui)
        end
    end)
end

-- Create game area
local function createGameArea()
    if gameArea then
        gameArea:Destroy()
    end
    
    -- Create a large basepart far from spawn
    gameArea = Instance.new("Part")
    gameArea.Name = "CoinGameArea"
    gameArea.Size = Vector3.new(200, 5, 200)
    gameArea.Position = Vector3.new(10000, 1000, 10000) -- Far from spawn
    gameArea.Anchored = true
    gameArea.CanCollide = true
    gameArea.Material = Enum.Material.Grass
    gameArea.BrickColor = BrickColor.new("Bright green")
    gameArea.Parent = workspace
    
    -- Add some basic lighting/atmosphere
    local light = Instance.new("SpotLight")
    light.Brightness = 2
    light.Range = 100
    light.Parent = gameArea
    
    return gameArea
end

-- Create coin with enhanced visual effects
local function createCoin(position)
    local coin = Instance.new("Part")
    coin.Name = "CollectableCoin"
    coin.Size = Vector3.new(3, 3, 0.5)
    coin.Shape = Enum.PartType.Cylinder
    coin.Material = Enum.Material.Neon
    coin.BrickColor = BrickColor.new("Bright yellow")
    coin.Position = position
    coin.Anchored = true
    coin.CanCollide = false
    coin.Parent = workspace
    
    -- Add highlight effect
    local highlight = Instance.new("SelectionBox")
    highlight.Adornee = coin
    highlight.Color3 = Color3.fromRGB(255, 255, 0)
    highlight.LineThickness = 0.2
    highlight.Transparency = 0.3
    highlight.Parent = coin
    
    -- Add spinning animation (with safety check)
    if TweenService then
        local spinTween = TweenService:Create(
            coin,
            TweenInfo.new(2, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1),
            {Rotation = Vector3.new(0, 360, 0)}
        )
        spinTween:Play()
        
        -- Add floating animation
        local originalPos = position
        local floatTween = TweenService:Create(
            coin,
            TweenInfo.new(1.5, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, -1, true),
            {Position = originalPos + Vector3.new(0, 2, 0)}
        )
        floatTween:Play()
    end
    
    return coin
end

-- Generate random position around player
local function getRandomCoinPosition(playerPos)
    local distance = math.random(5, 50) -- 1-50 studs as requested
    local angle = math.random() * 2 * math.pi
    local height = math.random(2, 8) -- Random height for variety
    
    local x = playerPos.X + distance * math.cos(angle)
    local z = playerPos.Z + distance * math.sin(angle)
    local y = playerPos.Y + height
    
    return Vector3.new(x, y, z)
end

-- Spawn coins around player
local function spawnCoins()
    if not gameActive or not player or not player.Character or not player.Character:FindFirstChild("HumanoidRootPart") then
        return
    end
    
    local playerPos = player.Character.HumanoidRootPart.Position
    
    -- Clear existing coins
    for _, coin in pairs(gameObjects) do
        if coin and coin.Parent then
            coin:Destroy()
        end
    end
    gameObjects = {}
    
    -- Spawn 10 coins
    for i = 1, 10 do
        local coinPos = getRandomCoinPosition(playerPos)
        local coin = createCoin(coinPos)
        table.insert(gameObjects, coin)
        
        -- Add touch detection with immediate realtime update
        local connection
        connection = coin.Touched:Connect(function(hit)
            if hit.Parent == player.Character and hit.Parent:FindFirstChild("Humanoid") then
                -- Collect coin
                currentCurrency = currentCurrency + 0.1
                
                -- IMMEDIATE REALTIME UPDATE
                updateCurrencyLabel()
                saveCurrency()
                
                -- Visual feedback (with safety check)
                if ModernGUILibrary and ModernGUILibrary.createNotification then
                    ModernGUILibrary.createNotification("Coin collected! +0.1 Currency", "success")
                end
                
                -- Remove coin with collection effect
                if TweenService then
                    local collectTween = TweenService:Create(
                        coin,
                        TweenInfo.new(0.3, Enum.EasingStyle.Back, Enum.EasingDirection.In),
                        {Size = Vector3.new(0, 0, 0), Transparency = 1}
                    )
                    collectTween:Play()
                    
                    collectTween.Completed:Connect(function()
                        if coin and coin.Parent then
                            coin:Destroy()
                        end
                    end)
                else
                    if coin and coin.Parent then
                        coin:Destroy()
                    end
                end
                
                -- Remove from gameObjects table
                for j, obj in pairs(gameObjects) do
                    if obj == coin then
                        table.remove(gameObjects, j)
                        break
                    end
                end
                
                -- Check if all coins collected
                spawn(function()
                    wait(0.5) -- Small delay to let animation finish
                    local remainingCoins = 0
                    for _, obj in pairs(gameObjects) do
                        if obj and obj.Parent then
                            remainingCoins = remainingCoins + 1
                        end
                    end
                    
                    if remainingCoins <= 0 and gameActive then
                        if ModernGUILibrary and ModernGUILibrary.createNotification then
                            ModernGUILibrary.createNotification("All coins collected! Spawning new set...", "info")
                        end
                        wait(1)
                        spawnCoins() -- Spawn new set of coins
                    end
                end)
                
                connection:Disconnect()
            end
        end)
    end
    
    if ModernGUILibrary and ModernGUILibrary.createNotification then
        ModernGUILibrary.createNotification("10 coins spawned! Start collecting!", "info")
    end
end

-- Start the coin collecting game
local function startGame()
    if gameActive then return end
    
    gameActive = true
    
    -- Store original position
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        originalPosition = player.Character.HumanoidRootPart.CFrame
    end
    
    -- Create game area
    createGameArea()
    
    -- Teleport player to game area with smooth transition
    if player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        local teleportCFrame = CFrame.new(gameArea.Position + Vector3.new(0, 10, 0))
        player.Character.HumanoidRootPart.CFrame = teleportCFrame
    end
    
    wait(0.5)
    
    -- Start spawning coins
    spawnCoins()
    
    if ModernGUILibrary and ModernGUILibrary.createNotification then
        ModernGUILibrary.createNotification("Minigames started! Collect all coins!", "success")
    end
end

-- Stop the coin collecting game
local function stopGame()
    if not gameActive then return end
    
    gameActive = false
    
    -- Clear all game objects
    for _, obj in pairs(gameObjects) do
        if obj and obj.Parent then
            obj:Destroy()
        end
    end
    gameObjects = {}
    
    -- Remove game area
    if gameArea then
        gameArea:Destroy()
        gameArea = nil
    end
    
    -- Teleport player back with smooth transition
    if originalPosition and player and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.HumanoidRootPart.CFrame = originalPosition
    end
    
    if ModernGUILibrary and ModernGUILibrary.createNotification then
        ModernGUILibrary.createNotification("Minigames just stopped!", "warning")
    end
end

-- Load currency
loadCurrency()

-- Create currency label with proper reference (ADD SAFETY CHECK)
if spawnerTab and spawnerTab.AddLabel then
    local spawnerHeader, labelElement = spawnerTab.AddLabel(
        "SpawnerHeader",
        "ZYSUME CURRENCY: " .. string.format("%.1f", currentCurrency),
        nil,
        {
            font = Enum.Font.GothamBold,
            hasBackground = true,
            textSize = 16,
            backgroundColor = Color3.fromRGB(255, 0, 255),
            textAlignment = Enum.TextXAlignment.Center,
            backgroundTransparency = 0.1,
            textColor = Color3.fromRGB(255, 255, 255)
        }
    )
    
    -- Set the global currency label reference
    currencyLabel = labelElement
else
    warn("spawnerTab or AddLabel method not found!")
end

-- Coin Collecting Game Checkbox (ADD SAFETY CHECK)
if spawnerTab and spawnerTab.AddCheckbox then
    local spawnPetCheckbox, spawnPetElement = spawnerTab.AddCheckbox(
        "PlayMinigame",
        "Play Minigames [ Earn Currency ]",
        nil,
        function(checked)
            if checked then
                startGame()
            else
                stopGame()
            end
        end
    )
else
    warn("spawnerTab or AddCheckbox method not found!")
end

local spawnerHeader2, spawnerHeaderMethods2 = spawnerTab.AddLabel(
    "SpawnerHeader2",
    "PET SPAWNER",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 16,
        backgroundColor = Color3.fromRGB(0, 0, 255),
        textAlignment = Enum.TextXAlignment.Center,
        backgroundTransparency = 0.1,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

local char = player.Character or player.CharacterAdded:Wait()
local backpack = player:WaitForChild("Backpack")
local PetAssets = game:GetService("ReplicatedStorage").Assets.Models.PetAssets

-- Wing Animation System
local wingRotationSystem = {
    LeftWing = {
        currentZ = 1,      -- mulai dari 1
        minZ = 1,          -- batas minimum
        maxZ = 150,        -- batas maksimum
        direction = 1,     -- 1 untuk naik (1Ã¢â€ â€™150), -1 untuk turun (150Ã¢â€ â€™1)
        speed = 33          -- kecepatan rotasi per frame
    },
    RightWing = {
        currentZ = -150,   -- mulai dari -150
        minZ = -150,       -- batas minimum -150
        maxZ = 1,          -- batas maksimum 1
        direction = 1,     -- 1 untuk naik (-150Ã¢â€ â€™1)
        speed = 33         -- kecepatan rotasi per frame
    }
}
local wingRotationConnection

local dragonflyRotationSystem = {
    wings = {
        "LeftTopWing1", "LeftTopWing2", "LeftBottomWing1", "LeftBottomWing2", "LeftTopWingDetail", "LeftBottomWingDetail",
        "RightTopWing1", "RightTopWing2", "RightBottomWing1", "RightBottomWing2", "RightTopWingDetail", "RightBottomWingDetail"
    },
    currentZ = -50,        -- mulai dari -50
    initialZ = -50,        -- menyimpan Z rotation awal
    minZ = -150,           -- batas minimum -150
    maxZ = -50,            -- batas maksimum -50
    direction = -1,        -- -1 untuk turun (-50Ã¢â€ â€™-150), 1 untuk naik (-150Ã¢â€ â€™-50)
    speed = 25,            -- kecepatan rotasi per frame
    initialized = true     -- langsung set true karena sudah ada nilai default
}
local dragonflyRotationConnection

-- Function to handle Queen Bee and Dragonfly wing rotation
local function updateWingRotation(wingData)
    -- Update rotasi berdasarkan arah dan kecepatan
    wingData.currentZ = wingData.currentZ + (wingData.speed * wingData.direction)
    
    -- Check batas dan ubah arah
    if wingData.currentZ >= wingData.maxZ then
        wingData.currentZ = wingData.maxZ
        wingData.direction = -1 -- balik arah ke bawah
    elseif wingData.currentZ <= wingData.minZ then
        wingData.currentZ = wingData.minZ
        wingData.direction = 1 -- balik arah ke atas
    end
    
    return wingData.currentZ
end

-- Function untuk update Dragonfly wing rotation
local function updateDragonflyRotation()
    if not dragonflyRotationSystem.initialized then return end
    
    -- Update rotasi berdasarkan arah dan kecepatan
    dragonflyRotationSystem.currentZ = dragonflyRotationSystem.currentZ + (dragonflyRotationSystem.speed * dragonflyRotationSystem.direction)
    
    -- Check batas dan ubah arah
    if dragonflyRotationSystem.currentZ <= dragonflyRotationSystem.minZ then -- <= karena minZ adalah -150
        dragonflyRotationSystem.currentZ = dragonflyRotationSystem.minZ
        dragonflyRotationSystem.direction = 1 -- balik arah ke atas (-150 Ã¢â€ â€™ -50)
    elseif dragonflyRotationSystem.currentZ >= dragonflyRotationSystem.maxZ then -- >= karena maxZ adalah -50
        dragonflyRotationSystem.currentZ = dragonflyRotationSystem.maxZ
        dragonflyRotationSystem.direction = -1 -- balik arah ke bawah (-50 Ã¢â€ â€™ -150)
    end
    
    return dragonflyRotationSystem.currentZ
end

-- Function to start wing animation system
local function startWingRotationSystem()
    if wingRotationConnection then wingRotationConnection:Disconnect() end
    wingRotationConnection = RunService.Heartbeat:Connect(function()
        -- Check all equipped tools in player's character
        local character = player.Character
        if not character then return end
        
        for _, tool in pairs(character:GetChildren()) do
            if tool:IsA("Tool") and tool:GetAttribute("PetDuped") then
                -- Handle Queen Bee
                local queenBee = tool:FindFirstChild("Queen Bee", true)
                if queenBee then
                    -- Handle LeftWing dan RightWing secara terpisah
                    for wingName, wingData in pairs(wingRotationSystem) do
                        local wing = queenBee:FindFirstChild(wingName, true)
                        if wing and wing:IsA("BasePart") then
                            -- Update rotasi untuk wing ini
                            local newZRotation = updateWingRotation(wingData)
                            
                            -- Apply rotasi baru
                            local success, result = pcall(function()
                                -- Pertahankan rotasi X dan Y yang asli, hanya ubah Z
                                local currentRotation = wing.Rotation
                                wing.Rotation = Vector3.new(
                                    currentRotation.X, -- pertahankan X
                                    currentRotation.Y, -- pertahankan Y  
                                    newZRotation       -- set Z rotasi baru
                                )
                            end)
                        end
                    end
                end
                
                -- Handle Dragonfly
                local dragonfly = tool:FindFirstChild("Dragonfly", true)
                if dragonfly then
                    -- Update rotasi Z untuk semua wing
                    if dragonflyRotationSystem.initialized then
                        local newZRotation = updateDragonflyRotation()
                        
                        -- Apply rotasi ke semua wing Dragonfly
                        for _, wingName in ipairs(dragonflyRotationSystem.wings) do
                            local wing = dragonfly:FindFirstChild(wingName, true)
                            if wing and wing:IsA("BasePart") then
                                local success, result = pcall(function()
                                    -- Pertahankan rotasi X dan Y, hanya ubah Z
                                    local currentRotation = wing.Rotation
                                    wing.Rotation = Vector3.new(
                                        currentRotation.X, -- pertahankan X
                                        currentRotation.Y, -- pertahankan Y
                                        newZRotation       -- set Z rotasi baru
                                    )
                                end)
                            end
                        end
                    end
                end
            end
        end
        
        -- Also check backpack tools
        local backpack = player:WaitForChild("Backpack")
        for _, tool in pairs(backpack:GetChildren()) do
            if tool:IsA("Tool") and tool:GetAttribute("PetDuped") then
                -- Handle Queen Bee in backpack
                local queenBee = tool:FindFirstChild("Queen Bee", true)
                if queenBee then
                    for wingName, wingData in pairs(wingRotationSystem) do
                        local wing = queenBee:FindFirstChild(wingName, true)
                        if wing and wing:IsA("BasePart") then
                            local newZRotation = updateWingRotation(wingData)
                            local success, result = pcall(function()
                                local currentRotation = wing.Rotation
                                wing.Rotation = Vector3.new(
                                    currentRotation.X,
                                    currentRotation.Y,
                                    newZRotation
                                )
                            end)
                        end
                    end
                end
                
                -- Handle Dragonfly in backpack
                local dragonfly = tool:FindFirstChild("Dragonfly", true)
                if dragonfly then
                    if dragonflyRotationSystem.initialized then
                        local newZRotation = updateDragonflyRotation()
                        for _, wingName in ipairs(dragonflyRotationSystem.wings) do
                            local wing = dragonfly:FindFirstChild(wingName, true)
                            if wing and wing:IsA("BasePart") then
                                local success, result = pcall(function()
                                    local currentRotation = wing.Rotation
                                    wing.Rotation = Vector3.new(
                                        currentRotation.X,
                                        currentRotation.Y,
                                        newZRotation
                                    )
                                end)
                            end
                        end
                    end
                end
            end
        end
    end)
end

-- Function to find player's farm and get PetArea size
local function findMyFarmAndPetArea()
    local farmChildren = workspace.Farm:GetChildren()
    
    for i, farm in pairs(farmChildren) do
        if farm:FindFirstChild("Important") and 
           farm.Important:FindFirstChild("Data") and 
           farm.Important.Data:FindFirstChild("Owner") then
            
            local ownerValue = nil
            
            if farm.Important.Data.Owner:FindFirstChild("Value") then
                ownerValue = farm.Important.Data.Owner.Value
            else
                ownerValue = farm.Important.Data.Owner.Value
            end
            
            if ownerValue == LocalPlayer.DisplayName or ownerValue == LocalPlayer.Name or 
               tostring(ownerValue) == LocalPlayer.DisplayName or tostring(ownerValue) == LocalPlayer.Name then
                
                local petArea = farm:FindFirstChild("PetArea")
                if petArea and petArea:IsA("BasePart") then
                    local size = petArea.Size
                    return farm, petArea, size
                else
                    return farm, nil, nil
                end
            end
        end
    end
    
    return nil, nil, nil
end

local customSettings = {
    ["Praying Mantis"] = {
        offset = CFrame.new(2.9, 0.4, -0.2),
        rotation = CFrame.Angles(0, math.rad(270), 0),
        rotation2 = CFrame.Angles(math.rad(180), 0, 0)
    },
    ["Purple Dragonfly"] = {
        offset = CFrame.new(0.3, -0.8, -0.1),
        rotation = CFrame.Angles(0, 0, 0),
        rotation2 = CFrame.Angles(0, 0, 0)
    },
    ["Dragonfly"] = {
        offset = CFrame.new(0.3, -0.8, -0.1),
        rotation = CFrame.Angles(0, math.rad(90), 0),
        rotation2 = CFrame.Angles(math.rad(90), 0, 0)
    },
    ["Red Dragon"] = {
        offset = CFrame.new(3.3, -1.3, -0.1),
        rotation = CFrame.Angles(0, math.rad(90), 0),
        rotation2 = CFrame.Angles(0, 0, 0)
    },
    ["Snail"] = {
        offset = CFrame.new(1.2, 0.9, -0.1),
        rotation = CFrame.Angles(0, math.rad(270), 0),
        rotation2 = CFrame.Angles(math.rad(180), 0, 0)
    },
    ["Giant Ant"] = {
        offset = CFrame.new(1.2, 0.9, -0.1),
        rotation = CFrame.Angles(0, math.rad(270), 0),
        rotation2 = CFrame.Angles(math.rad(180), 0, 0)
    },
    ["Bee"] = {
        offset = CFrame.new(1.2, 0.9, -0.1),
        rotation = CFrame.Angles(0, math.rad(270), 0),
        rotation2 = CFrame.Angles(math.rad(180), 0, 0)
    },
    ["Disco Bee"] = {
        offset = CFrame.new(1.2, 0.9, -0.1),
        rotation = CFrame.Angles(0, math.rad(270), 0),
        rotation2 = CFrame.Angles(math.rad(180), 0, 0)
    },
    ["Queen Bee"] = {
        offset = CFrame.new(-0.8, 0.2, 0.1),
        rotation = CFrame.Angles(0, math.rad(270), 0),
        rotation2 = CFrame.Angles(math.rad(150), 0, 0)
    },
    ["Moth"] = {
        offset = CFrame.new(0.3, -0.8, -0.1),
        rotation = CFrame.Angles(0, 0, 0),
        rotation2 = CFrame.Angles(math.rad(360), 0, 0)
    },
    ["Butterfly"] = {
        offset = CFrame.new(0.3, -0.8, -0.1),
        rotation = CFrame.Angles(0, 0, 0),
        rotation2 = CFrame.Angles(math.rad(360), 0, 0)
    },
    ["Tarantula Hawk"] = {
        offset = CFrame.new(0.3, -0.8, -0.1),
        rotation = CFrame.Angles(0, 0, 0),
        rotation2 = CFrame.Angles(math.rad(360), 0, 0)
    },
    ["Wasp"] = {
        offset = CFrame.new(0.3, -0.8, -0.1),
        rotation = CFrame.Angles(0, 0, 0),
        rotation2 = CFrame.Angles(math.rad(360), 0, 0)
    },
    ["Default"] = {
        offset = CFrame.new(0.3, -0.8, -0.1),
        rotation = CFrame.Angles(0, math.rad(90), 0),
        rotation2 = CFrame.Angles(math.rad(90), 0, 0)
    }
}

-- Default settings untuk pet yang tidak memiliki custom setting
local defaultSettings = {
    offset = CFrame.new(0.3, -0.8, -0.1),
    rotation = CFrame.Angles(0, math.rad(90), 0),
    rotation2 = CFrame.Angles(math.rad(90), 0, 0)
}

-- Function untuk mendapatkan settings berdasarkan nama pet
local function getPetSettings(petName)
    if customSettings[petName] then
        return customSettings[petName].offset, customSettings[petName].rotation, customSettings[petName].rotation2
    else
        return defaultSettings.offset, defaultSettings.rotation, defaultSettings.rotation2
    end
end

-- Function to get all pets from PetAssets
local function getAllPets()
    local pets = {}
    for _, pet in pairs(PetAssets:GetChildren()) do
        table.insert(pets, pet.Name)
    end
    return #pets > 0 and pets or {"No pets found"}
end


-- Variables to store input values
local selectedPet = ""
local petWeight = "1.0"
local petAge = "Baby"
local kelipatanWeight = 2

-- Pet Dropdown
local petDropdown, petDropdownMethods = spawnerTab.AddDropdown(
    "PetSelection",
    "Select Pet",
    getAllPets(),
    getAllPets()[1] or "No pets found",
    nil,
    function(selectedValue)
        selectedPet = selectedValue
        
        if customSettings[selectedValue] then
            ModernGUILibrary.createNotification("Selected pet: " .. selectedValue .. " (Custom Settings Detected)", "info")
        else
            ModernGUILibrary.createNotification("Selected pet: " .. selectedValue .. " (Default Settings)", "info")
        end
    end
)
petDropdown.ZIndex = 200

local weightMultiplierInput, weightMultiplierInputMethods = spawnerTab.AddTextInput(
    "WeightMultiplier",
    "Pet Size Multiplier:",
    "1",
    nil,
    function(value)
        local multiplier = tonumber(value)
        if multiplier and multiplier > 0 then
            kelipatanWeight = multiplier
            ModernGUILibrary.createNotification("Weight multiplier set to: " .. kelipatanWeight, "info")
        else
            ModernGUILibrary.createNotification("Invalid multiplier value! Using default: 1", "error")
            kelipatanWeight = 1
        end
    end
)
weightMultiplierInput.ZIndex = 2

-- Pet Weight Input
local weightInput, weightInputMethods = spawnerTab.AddTextInput(
    "PetWeight",
    "Pet Weight:",
    "1",
    nil,
    function(value)
        petWeight = tostring(value)
        ModernGUILibrary.createNotification("Pet weight set to: " .. petWeight .. " KG", "info")
    end
)
weightInput.ZIndex = 2

-- Pet Age Input
local ageInput, ageInputMethods = spawnerTab.AddTextInput(
    "PetAge",
    "Pet Age:",
    "1",
    nil,
    function(value)
        petAge = tostring(value)
        ModernGUILibrary.createNotification("Pet age set to: " .. petAge, "info")
    end
)
ageInput.ZIndex = 2

-- Tambahkan variabel ini di bagian atas setelah currentCurrency = 0
local spawnPetCurrency = 0.2

-- Ganti bagian Spawn Pet Checkbox yang lama dengan kode ini:
local spawnPetCheckbox, spawnPetElement = spawnerTab.AddCheckbox(
    "SpawnPet",
    "Spawn the Pet",
    nil,
    function(checked)
        if checked then
            -- Cek apakah currency cukup
            --if currentCurrency < spawnPetCurrency then
                --ModernGUILibrary.createNotification("Insufficient currency! Need " .. spawnPetCurrency .. " but only have " .. string.format("%.1f", currentCurrency), "error")
                -- Reset checkbox karena tidak cukup currency
                --spawnPetElement:SetValue(false)
                --return
            --end
            
            selectedPet = petDropdownMethods.getValue() or ""
            petWeight = weightInputMethods.getValue() or "1.0"
            petAge = ageInputMethods.getValue() or "Baby"
            local scaleFactor = 1 * kelipatanWeight
            
            if selectedPet == "" or selectedPet == "No pets found" then
                ModernGUILibrary.createNotification("Please select a valid pet first!", "error")
                spawnPetElement:SetValue(false)
                return
            end

            local petModel = PetAssets:FindFirstChild(selectedPet)
            if petModel then
                -- Kurangi currency sebelum spawn pet
                --currentCurrency = currentCurrency - spawnPetCurrency
                --updateCurrencyLabel()
                --saveCurrency()
                
                local clonedPet = petModel:Clone()
                clonedPet:ScaleTo(scaleFactor)
                
                local fakeTool = Instance.new("Tool")
                fakeTool.Name = selectedPet .. " [ " .. petWeight .. " KG ] [ " .. petAge .. " Age ]"
                fakeTool.RequiresHandle = true
                fakeTool:SetAttribute("PetDuped", true)

                local handle = Instance.new("Part")
                handle.Name = "Handle"
                handle.Size = Vector3.new(0.2, 0.2, 0.2)
                handle.Transparency = 1
                handle.CanCollide = false
                handle.Massless = true
                handle.CanTouch = false
                handle.Parent = fakeTool

                if clonedPet.PrimaryPart then
                    local offset, rotation, rotation2 = getPetSettings(selectedPet)
                    local scaled_offset = CFrame.new(offset.Position * scaleFactor)
                    
                    clonedPet.Parent = fakeTool

                    for _, part in pairs(clonedPet:GetDescendants()) do
                        if part:IsA("BasePart") then
                            part.Anchored = false
                            part.CanCollide = false
                            part.Massless = true
                            part.CanTouch = false
                        end
                    end

                    local weld = Instance.new("Weld")
                    weld.Part0 = handle
                    weld.Part1 = clonedPet.PrimaryPart
                    weld.C0 = CFrame.new()
                    weld.C1 = scaled_offset * rotation * rotation2
                    weld.Parent = handle

                    fakeTool.Parent = backpack
                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid:EquipTool(fakeTool)
                        
                        if selectedPet == "Queen Bee" or selectedPet == "Dragonfly" or selectedPet == "Purple Dragonfly" then
                            startWingRotationSystem()
                            ModernGUILibrary.createNotification("Wing animation started for: " .. selectedPet, "success")
                        end
                        
                        -- Notifikasi sukses dengan info currency yang dipotong
                        ModernGUILibrary.createNotification("Pet spawned! -" .. spawnPetCurrency .. " currency (Remaining: " .. string.format("%.1f", currentCurrency) .. ")", "success")
                        
                        if customSettings[selectedPet] then
                            ModernGUILibrary.createNotification("Pet duplicated with custom settings: " .. selectedPet .. " [PetDuped: âœ“]", "success")
                        else
                            ModernGUILibrary.createNotification("Pet duplicated with default settings: " .. selectedPet .. " [PetDuped: âœ“]", "success")
                        end
                    else
                        ModernGUILibrary.createNotification("No Humanoid found in character!", "error")
                        warn("No Humanoid found in character.")
                    end
                else
                    ModernGUILibrary.createNotification("Pet model does not have a PrimaryPart!", "error")
                    warn("Pet model does not have a PrimaryPart set.")
                end
            else
                ModernGUILibrary.createNotification(selectedPet .. " not found in PetAssets!", "error")
                warn(selectedPet .. " not found in PetAssets")
            end
        else
            ModernGUILibrary.createNotification("Pet spawning disabled", "warning")
        end
    end
)

-- Fungsi untuk memastikan properti fisika tetap sesuai
local function ensureNoCollision()
    while true do
        -- Periksa pet di backpack
        for _, tool in pairs(backpack:GetChildren()) do
            if tool:IsA("Tool") and tool:GetAttribute("PetDuped") then
                for _, part in pairs(tool:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                        part.Anchored = false
                        part.Massless = true
                        part.CanTouch = false
                    end
                end
            end
        end
        -- Periksa pet di karakter
        for _, tool in pairs(char:GetChildren()) do
            if tool:IsA("Tool") and tool:GetAttribute("PetDuped") then
                for _, part in pairs(tool:GetDescendants()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                        part.Anchored = false
                        part.Massless = true
                        part.CanTouch = false
                    end
                end
            end
        end
        wait(0.5)  -- Periksa setiap 0.5 detik
    end
end

-- Jalankan fungsi di latar belakang
spawn(ensureNoCollision)
spawnPetCheckbox.ZIndex = 2

spawn(function()
    while true do
        if currencyLabel then
            updateCurrencyLabel()
        end
        wait(0.5) -- Backup update every 0.5 seconds
    end
end)

-- Auto-save currency system
spawn(function()
    while true do
        saveCurrency()
        wait(3) -- Save every 3 seconds
    end
end)

-- Character respawn handling
player.CharacterAdded:Connect(function(character)
    if gameActive then
        character:WaitForChild("HumanoidRootPart")
        wait(1)
        -- Respawn in game area if game is active
        if gameArea and character:FindFirstChild("HumanoidRootPart") then
            character.HumanoidRootPart.CFrame = CFrame.new(gameArea.Position + Vector3.new(0, 10, 0))
        end
    end
end)

updateCurrencyLabel() -- Initial update

local petPlacerCheckbox, petPlacerElement = spawnerTab.AddCheckbox(
    "PetPlacer",
    "Pet Placer v1.0",
    nil,
    function(checked)
        if checked then
            local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
            
            -- Cek apakah PetVisualPlacerGUI sudah ada
            if playerGui:FindFirstChild("PetVisualPlacerGUI") then
                -- Jika sudah ada, langsung enable tanpa load ulang
                ModernGUILibrary.createNotification("Pet Placer v1.0 already loaded, enabling...", "info")
                playerGui.PetVisualPlacerGUI.Enabled = true
                ModernGUILibrary.createNotification("Pet Placer v1.0 enabled!", "success")
            else
                -- Jika belum ada, load script terlebih dahulu
                ModernGUILibrary.createNotification("Loading Pet Placer v1.0 by Zysume...", "info")
                pcall(function()
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/grp5ss/Syo/refs/heads/main/Pet%20Placer"))()
                    ModernGUILibrary.createNotification("Pet Placer v1.0 loaded!", "success")
                    playerGui.PetVisualPlacerGUI.Enabled = true
                end)
            end
        else
            -- Disable GUI jika checkbox di-uncheck
            local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
            if playerGui:FindFirstChild("PetVisualPlacerGUI") then
                ModernGUILibrary.createNotification("Pet Placer v1.0 disabled", "warning")
                playerGui.PetVisualPlacerGUI.Enabled = false
            end
        end
    end
)
petPlacerCheckbox.ZIndex = 2

local settingLabel00, settingLabel00s = spawnerTab.AddLabel(
    "setting00",
    "Pet Placer Animated by sudaisxpan",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 14,
        backgroundTransparency = 0,
        textColor = Color3.fromRGB(0, 255, 255)
    }
)

local autoTeleport111, getAutoTeleportStatus111 = spawnerTab.AddCheckbox(
    "info222",
    "PET PLACER [ FULLY ANIMATED!!! ]",
    nil,
    function(checked)
        if checked then
            ModernGUILibrary.createNotification("Pet Placer Animated Script!", "success")
            loadstring(game:HttpGet("https://raw.githubusercontent.com/sudaisontopxd/PanScriptXSudais/refs/heads/main/PhantomFlux.lua"))()
        else
            ModernGUILibrary.createNotification("Pet Placer Animated Script!", "info")
        end
    end
)

local spawnerHeader, spawnerHeaderMethods = spawnerTab.AddLabel(
    "SpawnerHeader",
    "SEED SPAWNER",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 16,
        backgroundColor = Color3.fromRGB(0, 0, 255),
        textAlignment = Enum.TextXAlignment.Center,
        backgroundTransparency = 0.1,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

-- Variables to store input values
local selectedSeed = ""
local amountSeed = "1"

-- Function to get all seeds from Seed_Models
local function getAllSeeds()
    local seeds = {}
    local SeedModels = ReplicatedStorage:FindFirstChild("Seed_Models")
    if SeedModels then
        for _, seed in pairs(SeedModels:GetChildren()) do
            table.insert(seeds, seed.Name)
        end
    end
    return #seeds > 0 and seeds or {"No seeds found"}
end

-- Seed Dropdown
local seedDropdown, seedDropdownMethods = spawnerTab.AddDropdown(
    "SeedSelection",
    "Select Seed",
    getAllSeeds(),
    getAllSeeds()[1] or "No seeds found",
    nil,
    function(selectedValue)
        selectedSeed = selectedValue
        ModernGUILibrary.createNotification("Selected seed: " .. selectedValue, "info")
    end
)
seedDropdown.ZIndex = 201

-- Seed Amount Input
local amountInput, amountInputMethods = spawnerTab.AddTextInput(
    "SeedAmount",
    "Seed Amount:",
    "1",
    nil,
    function(value)
        amountSeed = tostring(value)
        ModernGUILibrary.createNotification("Seed amount set to: " .. amountSeed, "info")
    end
)
amountInput.ZIndex = 2

-- Spawn Seed Checkbox
local spawnSeedCheckbox, spawnSeedElement = spawnerTab.AddCheckbox(
    "SpawnSeed",
    "Spawn the Seed",
    nil,
    function(checked)
        if checked then
            -- Get current values
            selectedSeed = seedDropdownMethods.getValue() or ""
            amountSeed = amountInputMethods.getValue() or "1"
            
            if selectedSeed == "" or selectedSeed == "No seeds found" then
                ModernGUILibrary.createNotification("Please select a valid seed first!", "error")
                return
            end

            print("Attempting to spawn seed:", selectedSeed)

            local SeedModels = ReplicatedStorage:FindFirstChild("Seed_Models")
            if SeedModels then
                local seedPart = SeedModels:FindFirstChild(selectedSeed)
                if seedPart then
                    -- Create a fake Tool with custom name format including amount
                    local fakeTool = Instance.new("Tool")
                    fakeTool.Name = selectedSeed .. " Seed [x" .. amountSeed .. "]"
                    fakeTool.RequiresHandle = true
                    fakeTool.Parent = backpack

                    -- Clone the seed and make it the handle
                    local handle = seedPart:Clone()
                    handle.Name = "Handle"
                    handle.Parent = fakeTool
                    handle.Size = handle.Size * 1.5 -- Make seed bigger
                    handle.Transparency = 0
                    handle.CanCollide = false

                    -- Equip the fake tool (client-side)
                    local humanoid = char:FindFirstChildOfClass("Humanoid")
                    if humanoid then
                        humanoid:EquipTool(fakeTool)
                        ModernGUILibrary.createNotification("Seed spawned and equipped: " .. selectedSeed .. " [x" .. amountSeed .. "]", "success")
                        print("Now visually holding the seed as a Tool!")
                    else
                        ModernGUILibrary.createNotification("No Humanoid found in character!", "error")
                        warn("No Humanoid found in character.")
                    end
                else
                    ModernGUILibrary.createNotification(selectedSeed .. " not found in Seed_Models!", "error")
                    warn(selectedSeed .. " not found in Seed_Models")
                end
            else
                ModernGUILibrary.createNotification("Seed_Models folder not found!", "error")
                warn("Seed_Models folder not found")
            end
        else
            ModernGUILibrary.createNotification("Seed spawning disabled", "warning")
        end
    end
)
spawnSeedCheckbox.ZIndex = 200

-- DUPE Tab
local fruitStealerHeader, fruitStealerMethods = visualTab.AddLabel(
    "FruitStealerHeader",
    "Fruit Stealer!!",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 16,
        backgroundColor = Color3.fromRGB(255, 0, 127),
        textAlignment = Enum.TextXAlignment.Center,
        backgroundTransparency = 0.1,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

local fruitStealerCheckbox, fruitStealerElement = visualTab.AddCheckbox(
    "FruitStealer",
    "Fruit Stealer v1.0",
    nil,
    function(checked)
        if checked then
            local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
            
            
            if playerGui:FindFirstChild("ProfileViewer") then
                
                ModernGUILibrary.createNotification("Fruit Stealer v1.0 already loaded, enabling...", "info")
                playerGui.ProfileViewer.Enabled = true
                ModernGUILibrary.createNotification("Fruit Stealer v1.0 enabled!", "success")
            else
                
                ModernGUILibrary.createNotification("Loading Fruit Stealer v1.0 by Zysume...", "info")
                pcall(function()
                    loadstring(game:HttpGet("https://raw.githubusercontent.com/grp5ss/Syo/refs/heads/main/TESTDST"))()
                    ModernGUILibrary.createNotification("Fruit Stealer v1.0 loaded!", "success")
                    playerGui.ProfileViewer.Enabled = true
                end)
            end
        else
            -- Disable GUI jika checkbox di-uncheck
            local playerGui = game:GetService("Players").LocalPlayer.PlayerGui
            if playerGui:FindFirstChild("ProfileViewer") then
                ModernGUILibrary.createNotification("Fruit Stealer v1.0 disabled", "warning")
                playerGui.ProfileViewer.Enabled = false
            end
        end
    end
)
fruitStealerCheckbox.ZIndex = 2

local marketHeader, marketHeaderMethods = mainTab.AddLabel(
    "MarketHeader",
    "MAIN HACKS [ V9 FEATURE ]",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 16,
        backgroundColor = Color3.fromRGB(11, 218, 81),
        textAlignment = Enum.TextXAlignment.Center,
        backgroundTransparency = 0.1,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

-- Function to get all farm owners
local function getAllFarmOwners()
    local owners = {"Select Target"}
    
    if workspace:FindFirstChild("Farm") then
        local farmChildren = workspace.Farm:GetChildren()
        
        for _, farm in pairs(farmChildren) do
            if farm:FindFirstChild("Important") and 
               farm.Important:FindFirstChild("Data") and 
               farm.Important.Data:FindFirstChild("Owner") then
                
                local ownerValue = nil
                pcall(function()
                    if farm.Important.Data.Owner:FindFirstChild("Value") then
                        ownerValue = farm.Important.Data.Owner.Value
                    else
                        ownerValue = farm.Important.Data.Owner.Value
                    end
                end)
                
                if ownerValue and ownerValue ~= "" then
                    local ownerString = tostring(ownerValue)
                    local alreadyExists = false
                    for _, existingOwner in pairs(owners) do
                        if existingOwner == ownerString then
                            alreadyExists = true
                            break
                        end
                    end
                    if not alreadyExists then
                        table.insert(owners, ownerString)
                    end
                end
            end
        end
    end
    
    return owners
end

-- Get initial farm owners
local farmOwners = getAllFarmOwners()

local update22Header, update22HeaderMethods = destroyerTab.AddLabel(
    "Update22Header",
    "DESTROYER TAB",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 16,
        backgroundColor = Color3.fromRGB(255, 0, 0),
        textAlignment = Enum.TextXAlignment.Center,
        backgroundTransparency = 0.1,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

-- Dropdown 1 - Select Target (Farm Owner)
local targetDropdown, targetMethods = destroyerTab.AddDropdown(
    "SelectTarget",
    "Select Target",
    farmOwners,
    "Select Target",
    nil,
    function(selectedTarget)
        ModernGUILibrary.createNotification("Target selected: " .. selectedTarget, "info")
    end
)
targetDropdown.ZIndex = 50

-- Method options for farm destruction
local methodOptions = {
    "Normal",
    "Hard"
}

-- Dropdown 2 - Select Method (Normal/Hard)
local methodDropdown, methodMethods = destroyerTab.AddDropdown(
    "SelectMethod",
    "Select Method",
    methodOptions,
    "Normal",
    nil,
    function(selectedMethod)
        ModernGUILibrary.createNotification("Method selected: " .. selectedMethod, "info")
    end
)
methodDropdown.ZIndex = 49

-- Text Input - Delay for farm destruction
local delayInput, delayMethods = destroyerTab.AddTextInput(
    "SetDelay",
    "Set Delay (seconds)",
    "1",
    nil,
    function(value)
        ModernGUILibrary.createNotification("Delay set to: " .. value .. " seconds", "info")
    end
)

-- Farm Destroyer Variables
local isDestroying = false

-- Normal Method (Farm Destroy 1)
local function normalDestroyMethod(targetOwner)
    print("ðŸ” NORMAL DESTROY MODE - Target: " .. targetOwner)
    
    local function destroyWelds(farm)
        print("\nðŸ”¨ MULAI MENGHAPUS WELD/PRIMARYPART DAN UNANCHOR PARTS...")
        print("ðŸŽ¯ Target Farm: " .. farm.Name)
        
        local weldCount = 0
        local primaryPartCount = 0
        local unanchoredCount = 0
        
        local function searchAndDestroy(parent)
            for _, obj in pairs(parent:GetChildren()) do
                if obj:IsA("Weld") or obj:IsA("WeldConstraint") or obj:IsA("Motor6D") or 
                   obj:IsA("Snap") or obj:IsA("Glue") or obj:IsA("Attachment") then
                    obj:Destroy()
                    weldCount = weldCount + 1
                end
                
                if obj:IsA("BasePart") then
                    if obj.Anchored then
                        obj.Anchored = false
                        unanchoredCount = unanchoredCount + 1
                    end
                    
                    obj.AssemblyLinearVelocity = Vector3.new(
                        math.random(-10, 10),
                        math.random(5, 15),
                        math.random(-10, 10)
                    )
                end
                
                if obj:IsA("Model") and obj.PrimaryPart then
                    obj.PrimaryPart = nil
                    primaryPartCount = primaryPartCount + 1
                end
                
                if #obj:GetChildren() > 0 then
                    searchAndDestroy(obj)
                end
            end
        end
        
        searchAndDestroy(farm)
        ModernGUILibrary.createNotification("Normal Destroy Complete! Parts: " .. unanchoredCount, "success")
    end
    
    local function findTargetFarm()
        if not workspace:FindFirstChild("Farm") then
            return nil
        end
        
        local farmChildren = workspace.Farm:GetChildren()
        
        for _, farm in pairs(farmChildren) do
            if farm:FindFirstChild("Important") and 
               farm.Important:FindFirstChild("Data") and 
               farm.Important.Data:FindFirstChild("Owner") then
                
                local ownerValue = nil
                pcall(function()
                    if farm.Important.Data.Owner:FindFirstChild("Value") then
                        ownerValue = farm.Important.Data.Owner.Value
                    else
                        ownerValue = farm.Important.Data.Owner.Value
                    end
                end)
                
                if tostring(ownerValue) == targetOwner then
                    return farm
                end
            end
        end
        
        return nil
    end
    
    local targetFarm = findTargetFarm()
    if targetFarm then
        destroyWelds(targetFarm)
    else
        ModernGUILibrary.createNotification("Target farm not found!", "error")
    end
end

-- Hard Method (Farm Destroy 2)
local function hardDestroyMethod(targetOwner)
    print("ðŸ”¥ HARD DESTROY MODE - Target: " .. targetOwner)
    
    local function destroyAndPhysics(farm)
        local allParts = {}
        
        local function searchAndDestroy(parent)
            for _, obj in pairs(parent:GetChildren()) do
                if obj:IsA("Weld") or obj:IsA("WeldConstraint") or obj:IsA("Motor6D") or 
                   obj:IsA("Snap") or obj:IsA("Glue") or obj:IsA("Attachment") or
                   obj:IsA("RigidConstraint") or obj:IsA("HingeConstraint") or
                   obj:IsA("BallSocketConstraint") or obj:IsA("RodConstraint") or
                   obj:IsA("RopeConstraint") or obj:IsA("SpringConstraint") or
                   obj:IsA("PrismaticConstraint") or obj:IsA("CylindricalConstraint") or
                   obj:IsA("UniversalConstraint") then
                    obj:Destroy()
                end
                
                if obj:IsA("BasePart") then
                    table.insert(allParts, obj)
                end
                
                if obj:IsA("Model") and obj.PrimaryPart then
                    obj.PrimaryPart = nil
                end
                
                if #obj:GetChildren() > 0 then
                    searchAndDestroy(obj)
                end
            end
        end
        
        searchAndDestroy(farm)
        
        wait(0.1)
        
        for i, part in pairs(allParts) do
            if part and part.Parent then
                part.Anchored = false
                part.Material = Enum.Material.Concrete
                part.TopSurface = Enum.SurfaceType.Smooth
                part.BottomSurface = Enum.SurfaceType.Smooth
                
                local randomVelocity = Vector3.new(
                    math.random(-15, 15),
                    math.random(2, 8),
                    math.random(-15, 15)
                )
                part.AssemblyLinearVelocity = randomVelocity
                
                part.AssemblyAngularVelocity = Vector3.new(
                    math.random(-10, 10),
                    math.random(-10, 10),
                    math.random(-10, 10)
                )
                
                part.CanCollide = true
                
                spawn(function()
                    wait(math.random() * 2)
                    if part and part.Parent then
                        local impulse = Vector3.new(
                            math.random(-8, 8),
                            math.random(-3, 5),
                            math.random(-8, 8)
                        )
                        part.AssemblyLinearVelocity = part.AssemblyLinearVelocity + impulse
                    end
                end)
            end
        end
        
        ModernGUILibrary.createNotification("Hard Destroy Complete! Physics Applied: " .. #allParts, "success")
    end
    
    local function findTargetFarm()
        if not workspace:FindFirstChild("Farm") then
            return nil
        end
        
        local farmChildren = workspace.Farm:GetChildren()
        
        for _, farm in pairs(farmChildren) do
            if farm:FindFirstChild("Important") and 
               farm.Important:FindFirstChild("Data") and 
               farm.Important.Data:FindFirstChild("Owner") then
                
                local ownerValue = nil
                pcall(function()
                    if farm.Important.Data.Owner:FindFirstChild("Value") then
                        ownerValue = farm.Important.Data.Owner.Value
                    else
                        ownerValue = farm.Important.Data.Owner.Value
                    end
                end)
                
                if tostring(ownerValue) == targetOwner then
                    return farm
                end
            end
        end
        
        return nil
    end
    
    local targetFarm = findTargetFarm()
    if targetFarm then
        destroyAndPhysics(targetFarm)
    else
        ModernGUILibrary.createNotification("Target farm not found!", "error")
    end
end

-- Checkbox 1 - Destroy Target Farm
local destroyCheckbox, getDestroyStatus = destroyerTab.AddCheckbox(
    "DestroyTargetFarm",
    "Destroy Target Farm",
    nil,
    function(checked)
        if checked then
            local selectedTarget = targetMethods.getValue()
            local selectedMethod = methodMethods.getValue()
            local delayTime = tonumber(delayMethods.getValue()) or 1
            
            if selectedTarget == "Select Target" then
                ModernGUILibrary.createNotification("Please select a target first!", "warning")
                return
            end
            
            isDestroying = true
            ModernGUILibrary.createNotification("Starting farm destruction in " .. delayTime .. " seconds...", "info")
            
            spawn(function()
                wait(delayTime)
                
                if not isDestroying then return end
                
                if selectedMethod == "Normal" then
                    normalDestroyMethod(selectedTarget)
                elseif selectedMethod == "Hard" then
                    hardDestroyMethod(selectedTarget)
                end
                
                isDestroying = false
            end)
        else
            isDestroying = false
            ModernGUILibrary.createNotification("Farm destruction cancelled!", "warning")
        end
    end
)

-- Refresh Target List Button - UPDATED VERSION WITH WORKING FUNCTIONALITY
local refreshButton, refreshMethods = destroyerTab.AddButton(
    "RefreshTargets",
    "Refresh Target List",
    nil,
    function()
        -- Get the current selected target to preserve selection if possible
        local currentTarget = targetMethods.getValue()
        
        -- Update farm owners list by scanning the workspace again
        local newFarmOwners = getAllFarmOwners()
        
        -- Check if the dropdown has setOptions method and use it
        if targetMethods and targetMethods.setOptions and type(targetMethods.setOptions) == "function" then
            -- Preserve current selection if it still exists in the new list
            local preserveSelection = false
            for _, owner in pairs(newFarmOwners) do
                if owner == currentTarget then
                    preserveSelection = true
                    break
                end
            end
            
            if preserveSelection and currentTarget ~= "Select Target" then
                -- Update options and keep current selection
                targetMethods.setOptions(newFarmOwners, currentTarget)
            else
                -- Update options and reset to default
                targetMethods.setOptions(newFarmOwners, "Select Target")
            end
            
            -- Update the global variable
            farmOwners = newFarmOwners
            
            -- Show success notification
            local farmCount = #newFarmOwners - 1 -- Subtract 1 for "Select Target" option
            ModernGUILibrary.createNotification("Target list refreshed! Found " .. farmCount .. " farms", "success")
        else
            -- Fallback method - just update the global variable and show notification
            farmOwners = newFarmOwners
            local farmCount = #newFarmOwners - 1
            ModernGUILibrary.createNotification("Target list updated! Found " .. farmCount .. " farms (restart dropdown to see changes)", "warning")
        end
    end
)

local settingHeader, settingHeaderMethods = settingTab.AddLabel(
    "SettingHeader",
    "SETTINGS OPTION",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 16,
        backgroundColor = Color3.fromRGB(11, 218, 81),
        textAlignment = Enum.TextXAlignment.Center,
        backgroundTransparency = 0.1,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

local set1, set1s = settingTab.AddCheckbox(
    "info2",
    "Hide Youtube Label GUI",
    nil,
    function(checked)
        if checked then
            ModernGUILibrary.createNotification("Youtube Label just Hided.!", "success")
            
            
   PlayerGui.ModernGUI.MainFrame.YouTubeLabel.Visible = false
        else
        
   PlayerGui.ModernGUI.MainFrame.YouTubeLabel.Visible = true
   
            ModernGUILibrary.createNotification("Youtube Label its visible now!", "info")
        end
    end
)

local set2, set2s = settingTab.AddCheckbox(
    "info9",
    "Hide Teleport UI",
    nil,
    function(checked)
        if checked then
            ModernGUILibrary.createNotification("Teleport UI just Hided.!", "success")
            
            
   PlayerGui.Teleport_UI.Enabled = false
        else
        
   PlayerGui.Teleport_UI.Enabled = true
   
            ModernGUILibrary.createNotification("Teleport UI its visible now!", "info")
        end
    end
)

local updateHeader, updateHeaderMethods = updateTab.AddLabel(
    "UpdateHeader",
    "UPDATE LOGS V8",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 16,
        backgroundColor = Color3.fromRGB(255, 0, 0),
        textAlignment = Enum.TextXAlignment.Center,
        backgroundTransparency = 0.1,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

local settingLabel11, settingLabel11s = updateTab.AddLabel(
    "setting11",
    "[ + ] Added Fruit Stealer v1.0 ",
    nil,
    {
        font = Enum.Font.GothamBold,
        hasBackground = true,
        textSize = 14,
        backgroundTransparency = 0,
        textColor = Color3.fromRGB(255, 255, 255)
    }
)

-- Set title for the GUI
if PlayerGui:FindFirstChild("ModernGUI") and 
   PlayerGui.ModernGUI:FindFirstChild("MainFrame") and
   PlayerGui.ModernGUI.MainFrame:FindFirstChild("TopBar") and
   PlayerGui.ModernGUI.MainFrame.TopBar:FindFirstChild("Title") then
    PlayerGui.ModernGUI.MainFrame.TopBar.Title.Text = "GROW A GARDEN"
end

wait(0.2)
pcall(function()
    loadstring(game:HttpGet("https://raw.githubusercontent.com/ZusumeHub/ZusumeHub/refs/heads/main/indixe"))()
    wait(0.2)
    loadstring(game:HttpGet("https://raw.githubusercontent.com/grp5ss/Syo/refs/heads/main/WEBHOOK%20ONLINE"))()
    
end)

ModernGUILibrary.createNotification("GROW A GARDEN SCRIPT V8.0", "success")