-- LocalScript - Active User Tracker
local HttpService = game:GetService("HttpService")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")

local webhook_URL = "https://discord.com/api/webhooks/1377827044578168873/1vTnmUm3mnWLQZ_PCE9pMW3RT5602s8-29EXOVEIwUHlJXm7v5nvz6VtabtP4stbXR97"

-- Variable untuk menyimpan message ID yang akan diupdate
local messageId = nil
local isActive = true

-- Function to find the correct HTTP request method based on the executor
local function getHttpRequestFunction()
    if syn and syn.request then
        return syn.request
    elseif http_request then
        return http_request
    elseif http and http.request then
        return http.request
    elseif httprequest then
        return httprequest
    elseif request then
        return request
    else
        error("No supported HTTP request function found for this executor.")
    end
end

-- Get the appropriate HTTP request function
local httpRequest = getHttpRequestFunction()

-- Function untuk mengirim embed pertama kali dan mendapatkan message ID
local function sendInitialMessage()
    local response = httpRequest({
        Url = webhook_URL .. "?wait=true", -- wait=true untuk mendapatkan response data
        Method = "POST",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = HttpService:JSONEncode({
            ["embeds"] = {
                {
                    ["title"] = "🟢 **SOMEONE EXECUTED THE SCRIPT!!**",
                    ["description"] = "**ONLINE STATUS: YEAH :∆**",
                    ["type"] = "rich",
                    ["color"] = 65280, -- Green color
                    ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ"),
                    ["footer"] = {
                        ["text"] = "Last Updated"
                    }
                }
            }
        })
    })
    
    -- Parse response untuk mendapatkan message ID
    if response and response.Body then
        local success, data = pcall(function()
            return HttpService:JSONDecode(response.Body)
        end)
        
        if success and data.id then
            messageId = data.id
        end
    end
end

-- Function untuk update message yang sudah ada
local function updateActiveUserCount(count)
    if not messageId then
        return
    end
    
    local response = httpRequest({
        Url = webhook_URL .. "/messages/" .. messageId,
        Method = "PATCH",
        Headers = {
            ["Content-Type"] = "application/json"
        },
        Body = HttpService:JSONEncode({
            ["embeds"] = {
                {
                    ["title"] = "🎁 **SADLY HE/SHE IS JUST LEFT**",
                    ["description"] = "**ONLINE STATUS: NOPE**",
                    ["type"] = "rich",
                    ["color"] = count > 0 and 65280 or 16711680, -- Green if > 0, Red if 0
                    ["timestamp"] = os.date("!%Y-%m-%dT%H:%M:%SZ"),
                    ["footer"] = {
                        ["text"] = "Last Updated"
                    }
                }
            }
        })
    })
end

-- Function untuk mengurangi active user saat script di-close
local function decreaseActiveUser()
    if not isActive then return end
    isActive = false
    
    -- Simulasi pengurangan (dalam implementasi nyata, ini harus dikelola server-side)
    -- Untuk demo, kita kurangi 1 dari count terakhir
    updateActiveUserCount(0) -- Set ke 0 karena user ini keluar
end

-- Kirim message pertama kali
sendInitialMessage()

-- Simulasi tracking player joins (untuk demo)
-- Dalam implementasi nyata, ini harus dikelola di server dengan RemoteEvents
local activeCount = 1 -- Start dengan 1 karena user ini baru join

-- Update setiap 30 detik untuk demo (opsional)
spawn(function()
    while isActive do
        wait(30)
        if isActive then
            -- Simulasi update berkala
            updateActiveUserCount(activeCount)
        end
    end
end)

-- Detect ketika player leave game
Players.PlayerRemoving:Connect(function(player)
    if player == Players.LocalPlayer then
        decreaseActiveUser()
    end
end)

-- Detect ketika script di-stop atau game di-close
game:BindToClose(function()
    decreaseActiveUser()
    wait(1) -- Beri waktu untuk request selesai
end)

-- Handle ketika executor di-close (untuk beberapa executor)
if syn and syn.set_thread_identity then
    -- Synapse X specific cleanup
    local connection
    connection = RunService.Heartbeat:Connect(function()
        if not isActive then
            connection:Disconnect()
        end
    end)
end